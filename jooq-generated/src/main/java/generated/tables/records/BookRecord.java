/*
 * This file is generated by jOOQ.
 */
package generated.tables.records;


import generated.tables.Book;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookRecord extends UpdatableRecordImpl<BookRecord> implements Record5<Integer, Integer, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.book.id</code>.
     */
    public BookRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.book.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.book.author_id</code>.
     */
    public BookRecord setAuthorId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.book.author_id</code>.
     */
    public Integer getAuthorId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.book.title</code>.
     */
    public BookRecord setTitle(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.book.title</code>.
     */
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.book.language</code>.
     */
    public BookRecord setLanguage(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.book.language</code>.
     */
    public String getLanguage() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.book.published_in</code>.
     */
    public BookRecord setPublishedIn(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.book.published_in</code>.
     */
    public Integer getPublishedIn() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, Integer, String, String, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Book.BOOK.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Book.BOOK.AUTHOR_ID;
    }

    @Override
    public Field<String> field3() {
        return Book.BOOK.TITLE;
    }

    @Override
    public Field<String> field4() {
        return Book.BOOK.LANGUAGE;
    }

    @Override
    public Field<Integer> field5() {
        return Book.BOOK.PUBLISHED_IN;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getAuthorId();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public String component4() {
        return getLanguage();
    }

    @Override
    public Integer component5() {
        return getPublishedIn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getAuthorId();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public String value4() {
        return getLanguage();
    }

    @Override
    public Integer value5() {
        return getPublishedIn();
    }

    @Override
    public BookRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public BookRecord value2(Integer value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public BookRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public BookRecord value4(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public BookRecord value5(Integer value) {
        setPublishedIn(value);
        return this;
    }

    @Override
    public BookRecord values(Integer value1, Integer value2, String value3, String value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookRecord
     */
    public BookRecord() {
        super(Book.BOOK);
    }

    /**
     * Create a detached, initialised BookRecord
     */
    public BookRecord(Integer id, Integer authorId, String title, String language, Integer publishedIn) {
        super(Book.BOOK);

        setId(id);
        setAuthorId(authorId);
        setTitle(title);
        setLanguage(language);
        setPublishedIn(publishedIn);
    }

    /**
     * Create a detached, initialised BookRecord
     */
    public BookRecord(generated.tables.pojos.Book value) {
        super(Book.BOOK);

        if (value != null) {
            setId(value.getId());
            setAuthorId(value.getAuthorId());
            setTitle(value.getTitle());
            setLanguage(value.getLanguage());
            setPublishedIn(value.getPublishedIn());
        }
    }
}
